{% macro srcset(image, maxCssWidth, includeDimensions) %}
    {%- spaceless %}
        {# Is this a 2X image? #}
        {% set is2x = image.filename matches '/@2x\\.\\w+$/' %}

        {# Determine the CSS width for the image, if it were output at 100% #}
        {% set cssWidth = (is2x ? round(image.width / 2) : image.width) %}

        {# Determine the image size that 1X screens should get #}
        {% set width = (cssWidth > maxCssWidth ? maxCssWidth : cssWidth) %}

        {# Determine the image size that 2X screens should get #}
        {% set width2x = (width * 2) > image.width ? image.width : (width * 2) %}

        {# Output the srcset= attribute value #}
        {% set url1x = image.getUrl(image.width != width ? { width: width }) %}
        {% set url2x = image.getUrl(image.width != width2x ? { width: width2x }) %}

        src="{{ url1x }}"
        srcset="{{ url1x }}, {{ url2x }} 2x"

        {#- Output the width= and height= attributes if needed #}
        {%- if includeDimensions %} width="{{ width }}" height="{{ image.getHeight({ width: width }) }}"{% endif %}
    {% endspaceless -%}
{% endmacro %}


{% macro retinaBackground(image, maxCssWidth) %}
    {%- spaceless %}
        {# Is this a 2X image? #}
        {% set is2x = image.filename matches '/@2x\\.\\w+$/' %}

        {# Determine the CSS width for the image, if it were output at 100% #}
        {% set cssWidth = (is2x ? round(image.width / 2) : image.width) %}

        {# Determine the image size that 1X screens should get #}
        {% set width = (cssWidth > maxCssWidth ? maxCssWidth : cssWidth) %}

        {# Determine the image size that 2X screens should get #}
        {% set width2x = (width * 2) > image.width ? image.width : (width * 2) %}

        {# Output #}
        {% set url1x = image.getUrl(image.width != width ? { width: width }) %}
        {% set url2x = image.getUrl(image.width != width2x ? { width: width2x }) %}
        
        background-image: url({{ url1x }});
        background-image: -webkit-image-set(url({{url1x}}) 1x, url({{url2x}}) 2x);
    {% endspaceless -%}
{% endmacro %}


{% macro getActualImageWidth(image, maxCssWidth) %}
    {%- spaceless %}
        {# Is this a 2X image? #}
        {% set is2x = image.filename matches '/@2x\\.\\w+$/' %}

        {# Determine the CSS width for the image, if it were output at 100% #}
        {% set cssWidth = (is2x ? round(image.width / 2) : image.width) %}

        {# Determine the image size that 1X screens should get #}
        {% set width = (cssWidth > maxCssWidth ? maxCssWidth : cssWidth) %}

        {{ width }}
    {% endspaceless -%}
{% endmacro %}


{% macro dataMaxSize(image, maxCssWidth) %}
    {%- spaceless %}
        {# Is this a 2X image? #}
        {% set is2x = image.filename matches '/@2x\\.\\w+$/' %}

        {# Determine the CSS width for the image, if it were output at 100% #}
        {% set cssWidth = (is2x ? round(image.width / 2) : image.width) %}

        {# Determine the image size that 1X screens should get #}
        {% set width = (cssWidth > maxCssWidth ? maxCssWidth : cssWidth) %}
        {% set height = round(width / (image.width / image.height)) %}

        {# Determine the image size that 2X screens should get #}
        {% set width2x = (width * 2) > image.width ? image.width : (width * 2) %}
        {% set height2x = round(width2x / (image.width / image.height)) %}

        {%- if is2x %}
            data-max-width="{{ width2x }}" data-max-height="{{ height2x }}"
        {% else %}
            data-max-width="{{ width }}" data-max-height="{{ height }}"
        {% endif %}
    {% endspaceless -%}
{% endmacro %}